// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test BrainS3ToTrainModelLambda construct 1`] = `
Object {
  "Mappings": Object {
    "Solution": Object {
      "Data": Object {
        "ID": "SO0027",
        "SendAnonymousUsageData": "Yes",
        "Version": "%%VERSION%%",
      },
    },
  },
  "Parameters": Object {
    "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaArtifactHashE3304DF7": Object {
      "Description": "Artifact hash for asset \\"5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afa\\"",
      "Type": "String",
    },
    "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3BucketA27C2E98": Object {
      "Description": "S3 bucket for asset \\"5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afa\\"",
      "Type": "String",
    },
    "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3VersionKey0028DE8A": Object {
      "Description": "S3 key for asset version \\"5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afa\\"",
      "Type": "String",
    },
    "AssetParameters83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736ArtifactHashE3B13ED0": Object {
      "Description": "Artifact hash for asset \\"83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736\\"",
      "Type": "String",
    },
    "AssetParameters83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736S3BucketC5F6A305": Object {
      "Description": "S3 bucket for asset \\"83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736\\"",
      "Type": "String",
    },
    "AssetParameters83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736S3VersionKey1EAAC1C3": Object {
      "Description": "S3 key for asset version \\"83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "BrainS3ToTrainModelLambdaLambdaFunction7F77AB14": Object {
      "DependsOn": Array [
        "BrainS3ToTrainModelLambdaLambdaFunctionServiceRoleDefaultPolicy61101627",
        "BrainS3ToTrainModelLambdaLambdaFunctionServiceRole359A13D3",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736S3BucketC5F6A305",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736S3VersionKey1EAAC1C3",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters83952cb4f7ea2964b22bcd5f946b0dda6f46731d9a6a80a5b1b3bb8407617736S3VersionKey1EAAC1C3",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": "Serverless-bot-framework TrainModel lambda",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "REGION": Object {
              "Ref": "AWS::Region",
            },
            "SEND_ANONYMOUS_USAGE_DATA": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Data",
                "SendAnonymousUsageData",
              ],
            },
            "SOLUTION_ID": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Data",
                "ID",
              ],
            },
            "VERSION": Object {
              "Fn::FindInMap": Array [
                "Solution",
                "Data",
                "Version",
              ],
            },
          },
        },
        "FunctionName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-TrainModelLambda",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "BrainS3ToTrainModelLambdaLambdaFunctionServiceRole359A13D3",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "BrainS3ToTrainModelLambdaLambdaFunctionServiceRole359A13D3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BrainS3ToTrainModelLambdaLambdaFunctionServiceRoleDefaultPolicy61101627": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BrainS3ToTrainModelLambdaLambdaFunctionServiceRoleDefaultPolicy61101627",
        "Roles": Array [
          Object {
            "Ref": "BrainS3ToTrainModelLambdaLambdaFunctionServiceRole359A13D3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda function has permission to write CloudWatch Logs via AWSLambdaBasicExecutionRole policy attached to the lambda role",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = (event, context) => {
    // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
    const s3 = new (require('aws-sdk').S3)();
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const https = require('https');
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const url = require('url');
    log(JSON.stringify(event, undefined, 2));
    const props = event.ResourceProperties;
    if (event.RequestType === 'Delete') {
        props.NotificationConfiguration = {}; // this is how you clean out notifications
    }
    const req = {
        Bucket: props.BucketName,
        NotificationConfiguration: props.NotificationConfiguration,
    };
    return s3.putBucketNotificationConfiguration(req, (err, data) => {
        log({ err, data });
        if (err) {
            return submitResponse('FAILED', err.message + \`\\\\nMore information in CloudWatch Log Stream: \${context.logStreamName}\`);
        }
        else {
            return submitResponse('SUCCESS');
        }
    });
    function log(obj) {
        console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
    }
    // eslint-disable-next-line max-len
    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
    // to allow sending an error messge as a reason.
    function submitResponse(responseStatus, reason) {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
            PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: false,
        });
        log({ responseBody });
        const parsedUrl = url.parse(event.ResponseURL);
        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.path,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };
        const request = https.request(options, (r) => {
            log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
            context.done();
        });
        request.on('error', (error) => {
            log({ sendError: error });
            context.done();
        });
        request.write(responseBody);
        request.end();
    }
};",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Bucket resource is '*' due to circular dependency with bucket and role creation at the same time",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B",
          },
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketAllowBucketNotificationsToBrainS3ToTrainModelLambdaLambdaFunction2742A85FD0C93310": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "BrainS3ToTrainModelLambdaLambdaFunction7F77AB14",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunction2D415C65": Object {
      "DependsOn": Array [
        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleDefaultPolicyDFCF7AF2",
        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3BucketA27C2E98",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3VersionKey0028DE8A",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3VersionKey0028DE8A",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": "Serverless-bot-framework Core lambda",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
            },
            "botGender": "Male",
            "botLanguage": "English",
            "botName": "Joe",
            "bucketName": Object {
              "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
            },
            "forceCacheUpdate": "false",
          },
        },
        "FunctionName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-CoreLambda",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleDefaultPolicyDFCF7AF2": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleDefaultPolicyDFCF7AF2",
        "Roles": Array [
          Object {
            "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketNotifications5271623D": Object {
      "DependsOn": Array [
        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketAllowBucketNotificationsToBrainS3ToTrainModelLambdaLambdaFunction2742A85FD0C93310",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
        },
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:Put",
              ],
              "Filter": Object {
                "Key": Object {
                  "FilterRules": Array [
                    Object {
                      "Name": "suffix",
                      "Value": "json",
                    },
                    Object {
                      "Name": "prefix",
                      "Value": "knowledge",
                    },
                  ],
                },
              },
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "BrainS3ToTrainModelLambdaLambdaFunction7F77AB14",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketPolicyB439C9EB": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucketPolicy2D6CFAF2": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "coreLambdaBrainS3BucketPollyPolicy92F28419": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Polly allows specifying lexicon ARNs only. There is no specific lexicon required for this policy",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "polly:SynthesizeSpeech",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "coreLambdaBrainS3BucketPollyPolicy92F28419",
        "Roles": Array [
          Object {
            "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
