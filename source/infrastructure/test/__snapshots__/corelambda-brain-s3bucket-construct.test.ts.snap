// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test CoreLambdaToBrainS3 construct 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaArtifactHashE3304DF7": Object {
      "Description": "Artifact hash for asset \\"5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afa\\"",
      "Type": "String",
    },
    "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3BucketA27C2E98": Object {
      "Description": "S3 bucket for asset \\"5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afa\\"",
      "Type": "String",
    },
    "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3VersionKey0028DE8A": Object {
      "Description": "S3 key for asset version \\"5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afa\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B",
          },
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunction2D415C65": Object {
      "DependsOn": Array [
        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleDefaultPolicyDFCF7AF2",
        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with more tighter permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3BucketA27C2E98",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3VersionKey0028DE8A",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters5f37a85f8eb584400dc482deeea8c668d0a673ab8bec04965d7601962c717afaS3VersionKey0028DE8A",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": "Serverless-bot-framework Core lambda",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
            },
            "botGender": "Male",
            "botLanguage": "English",
            "botName": "Joe",
            "bucketName": Object {
              "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
            },
            "forceCacheUpdate": "false",
          },
        },
        "FunctionName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-CoreLambda",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": Object {
          "Fn::GetAtt": Array [
            "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleDefaultPolicyDFCF7AF2": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleDefaultPolicyDFCF7AF2",
        "Roles": Array [
          Object {
            "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketPolicyB439C9EB": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "coreLambdaBrainS3BucketCoreLambdaBrainS3Bucket174EF602",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucketPolicy2D6CFAF2": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketS3LoggingBucket204EE85B",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "coreLambdaBrainS3BucketPollyPolicy92F28419": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Polly allows specifying lexicon ARNs only. There is no specific lexicon required for this policy",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "polly:SynthesizeSpeech",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "coreLambdaBrainS3BucketPollyPolicy92F28419",
        "Roles": Array [
          Object {
            "Ref": "coreLambdaBrainS3BucketCoreLambdaBrainS3BucketLambdaFunctionServiceRoleBD7BA59F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
