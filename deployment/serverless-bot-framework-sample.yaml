# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  (SO0027 - Sample Nested Stack) AWS Serverless Bot Framework %%VERSION%%. Deploys a React and Amplify-based website to an S3 bucket and Cloudfront distribution. Also integrates with Lambda functions in the parent stack that work as the brain for the chatbot application.

Parameters:

  WeatherAPIProvider:
    Type: String
    Description: Choice of weather api source or a random weather generator
    Default: "Random Weather Generator"
    AllowedValues:
      - "Random Weather Generator"
      - AccuWeather
      - OpenWeather

  WeatherAPIKey:
    Type: String
    Description: API key for weather API (Optional). Not required for Random Weather Generator
    MinLength: 0
    MaxLength: 64
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: API key must only contain uppercase and lowercase letters and numbers
    NoEcho: True
    Default: ""

Conditions:
  WeatherAPIChosen: !Not [!Equals [ !Ref WeatherAPIProvider, "Random Weather Generator"]]

Mappings:
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

Resources:
  WebClient:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: web-client-bucket-logs/
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebClientBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebClient'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${WebClient}/*'
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${WebClient}"

  Distribution:
    Type: 'AWS::CloudFront::Distribution'
    Metadata:
      Comment: 'A simple CloudFront distribution with an S3 origin'
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: "ViewerProtocolPolicy is set to 'redirect-to-httpsâ€™ and there is no alternate domain for the distribution so CloudFrontDefaultCertificate has to be true"

    Properties:
      DistributionConfig:
        Comment: 'A simple distribution with an S3 origin'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2018
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: 'none'
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub 's3-origin-${WebClient}'
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: '/index.html'
            ResponseCode: 200
          - ErrorCode: 403
            ResponsePagePath: '/index.html'
            ResponseCode: 200
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: false
        Origins:
          - DomainName: !Sub "${WebClient}.s3.${AWS::Region}.amazonaws.com"
            Id: !Sub 's3-origin-${WebClient}'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        Logging:
          IncludeCookies: false
          Bucket: !GetAtt Logs.DomainName
          Prefix: Cloudfront-distribution-logs/

  KnowledgeLeaveFeedbackExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ':'
                  - - arn:aws:logs
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - log-group:/aws/lambda/*
        - PolicyName: DynamoDBWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource: !GetAtt 'DynamoLeaveFeedback.Arn'

  WeatherForecastLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - !If
          - WeatherAPIChosen
          - PolicyName: SSMGet
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: ['ssm:GetParameter']
                  Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-weather-api-key
          - !Ref "AWS::NoValue"

  WriteAPIKeyToSSMCustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: WeatherAPIChosen
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - !If
          - WeatherAPIChosen
          - PolicyName: SSMUpdate
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: ['ssm:PutParameter', 'ssm:DeleteParameter']
                  Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-weather-api-key
          - !Ref "AWS::NoValue"

  OrderPizzaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: WebClientBucket
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'WebClient'
                      - /
                      - 'pizza-menus'
                      - /*                 
          - PolicyName: DynamoDB
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt 'DynamoPizzaOrders.Arn'
                    - !Join
                      - ''
                      - - !GetAtt 'DynamoPizzaOrders.Arn'
                        - /*
                    - !GetAtt 'DynamoPizzaMenus.Arn'
                    - !Join
                      - ''
                      - - !GetAtt 'DynamoPizzaMenus.Arn'
                        - /*
          - PolicyName: CloudWatchLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: !Join
                    - ':'
                    - - arn:aws:logs
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - log-group:/aws/lambda/*

  Logs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This S3 bucket is used as the logging destination for CloudFront and WebClient bucket created by this solution.
          - id: W51
            reason: This bucket is used for logging. By default it is private and doesn't need a bucket policy.
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  KnowledgeWeatherForecast:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "sample-bot-weather-forecast.zip"]]
      Description: Sample - Weather Forecast
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'WeatherForecastLambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          !If
            - WeatherAPIChosen
            - 
              API_PROVIDER: !Ref WeatherAPIProvider
              SSM_REFERENCE_TO_API_KEY: !Sub "${AWS::StackName}-weather-api-key"
            - 
              SSM_REFERENCE_TO_API_KEY: !Ref "AWS::NoValue"
              API_PROVIDER: !Ref "AWS::NoValue"

  WriteAPIToSSMCustomResourceLambda:
    Type: AWS::Lambda::Function
    Condition: WeatherAPIChosen
    Properties:
      Runtime: python3.8
      Role: !GetAtt 'WriteAPIKeyToSSMCustomResourceLambdaExecutionRole.Arn'
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "write-api-to-ssm-custom-resource.zip"]]
      Description: Write APIKey to SSM

  WriteKey:
    Type: "Custom::WriteKey"
    Condition: WeatherAPIChosen
    Properties:
      ServiceToken: !GetAtt 'WriteAPIToSSMCustomResourceLambda.Arn'
      APIKey: !Ref WeatherAPIKey
      SSMKeyNameAPI: !Sub "${AWS::StackName}-weather-api-key"

  KnowledgeLeaveFeedback:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "sample-leave-feedback.zip"]]
      Description: Sample - Leave Feedback
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'KnowledgeLeaveFeedbackExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 60
      Environment: 
        Variables:
          TABLE_NAME: !Ref 'DynamoLeaveFeedback'

  KnowledgeOrderPizza:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "order-pizza.zip"]]
      Description: Order Pizza Function
      Handler: index.handler
      MemorySize: 128
      Environment:
        Variables:
          PIZZA_MENUS_INITIALIZATION_BUCKET: !Ref 'WebClient'
          PIZZA_MENUS_INITIALIZATION_FILE: 'pizza-menus/pizza-menu.json'
          PIZZA_ORDERS_TABLE: !Ref 'DynamoPizzaOrders'
          PIZZA_MENUS_TABLE: !Ref 'DynamoPizzaMenus'
          PIZZA_MENU_ID: 'main_menu_1'
          PIZZA_ORDERS_GLOBAL_INDEX_NAME: 'customerId-orderTimestamp-index'
          RE_INITIALIZE_MENUS_TABLE: 'false'
      Role: !GetAtt 'OrderPizzaFunctionRole.Arn'
      Runtime: nodejs12.x
      Timeout: 180

  DynamoLeaveFeedback:
    Type: AWS::DynamoDB::Table
    Properties:
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: "uuid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "uuid"
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

  DynamoPizzaOrders:
    Type: AWS::DynamoDB::Table
    Properties:
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: orderTimestamp
          AttributeType: N
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: customerId-orderTimestamp-index
          KeySchema:
            - AttributeName: customerId
              KeyType: HASH
            - AttributeName: orderTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  DynamoPizzaMenus:
    Type: AWS::DynamoDB::Table
    Properties:
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: menuId
          AttributeType: S
      KeySchema:
        - AttributeName: menuId
          KeyType: HASH
      BillingMode: "PAY_PER_REQUEST"

Outputs:
  WebClient:
    Description: Sample web client bucket name.
    Value: !Ref 'WebClient'
  WebClientArn:
    Description: Sample web client ARN.
    Value: !GetAtt 'WebClient.Arn'
  WebClientDomainName:
    Description: Sample web client domain name.
    Value: !GetAtt 'Distribution.DomainName'
  KnowledgeWeatherForecast:
    Description: Knowledge weather forecast function name.
    Value: !Ref 'KnowledgeWeatherForecast'
  KnowledgeWeatherForecastArn:
    Description: Knowledge weather forecast function ARN.
    Value: !GetAtt 'KnowledgeWeatherForecast.Arn'
  KnowledgeLeaveFeedback:
    Description: Knowledge leave feedback function name.
    Value: !Ref 'KnowledgeLeaveFeedback'
  KnowledgeLeaveFeedbackArn:
    Description: Knowledge leave feedback function ARN.
    Value: !GetAtt 'KnowledgeLeaveFeedback.Arn'
  LeaveFeedbackDynamoDBTable:
    Description: DynamoDB table name for feedback
    Value: !Select [1, !Split ['/', !GetAtt DynamoLeaveFeedback.Arn]]
  KnowledgeOrderPizza:
    Description: Knowledge order pizza function name.
    Value: !Ref 'KnowledgeOrderPizza'
  KnowledgeOrderPizzaArn:
    Description: Knowledge order pizza function ARN.
    Value: !GetAtt 'KnowledgeOrderPizza.Arn'