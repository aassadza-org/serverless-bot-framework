# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  (SO0027 - Security Nested Stack) AWS Serverless Bot Framework %%VERSION%%.
Parameters:
  BotApi:
    Type: String
  WebClientDomainName:
    Type: String
  AdminName:
    Type: String
  AdminEmail:
    Type: String

Resources:
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The wildcard action required for api gateway, limited to a single API"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-congnito-access-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BotApi}/prod/*

  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"

  CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
          UserPoolName: !Sub ${AWS::StackName}
          AdminCreateUserConfig:
            AllowAdminCreateUserOnly: True
            InviteMessageTemplate:
              EmailMessage:
                !Sub |
                  <p>You are invited to join the Serverless Bot Framework Solution.</p>
                  <p>Username: <strong>{username}</strong></p>
                  <p>Password: <strong>{####}</strong></p>
                  <p>Console: <strong>https://${WebClientDomainName}/</strong></p>
              EmailSubject: Welcome to Serverless Bot Framework
              SMSMessage: "Your username is {username} and temporary password is {####}."
            UnusedAccountValidityDays: 7
          AliasAttributes:
            - "email"
          AutoVerifiedAttributes:
            - "email"
          EmailVerificationMessage: "Your Serverless Bot Framework console verification code is {####}."
          EmailVerificationSubject: "Your Serverless Bot Framework console verification code"
          Policies:
            PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: True
              RequireNumbers: True
              RequireSymbols: False
              RequireUppercase: True
          Schema:
            -
              AttributeDataType: "String"
              Name: "email"
              Required: True
          UserPoolAddOns:
            AdvancedSecurityMode: "ENFORCED"

  CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub ${AWS::StackName}-app
        GenerateSecret: False
        WriteAttributes:
          - "email"
        RefreshTokenValidity: 1
        UserPoolId: !Ref CognitoUserPool

  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AWS::StackName}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:  !Ref CognitoUserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region",  client: !Ref CognitoUserPool}

  CognitoAttachRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
        authenticated: !GetAtt CognitoAuthorizedRole.Arn

  CognitoUser:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        -
          Name: email
          Value: !Ref AdminEmail
        -
          Name: nickname
          Value: !Ref AdminName
        -
          Name: email_verified
          Value: 'True'
      Username: !Ref AdminName
      UserPoolId: !Ref CognitoUserPool

Outputs:
  CognitoIdentityPool:
    Description: Cognito Identity Pool ID.
    Value: !Ref 'CognitoIdentityPool'
  CognitoUserPoolId:
    Description: Cognito User Pool ID.
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: Client ID for Cognito User Pool.
    Value: !Ref CognitoUserPoolClient
